import React from 'react';
import {
  Database,
  Users,
  Activity,
  Calendar,
  Heart,
  UserCog,
  Building,
  Pill,
  Scissors,
  FileText,
  AlertTriangle,
  ClipboardList,
  Target,
  FileCheck,
  Scan,
  FileArchive,
  CalendarCheck,
  MapPin,
  Cpu,
  TestTube,
  Syringe,
  Stethoscope,
  Shield,
  Zap,
  Globe,
  Lock,
  Unlock,
  Eye,
  EyeOff,
  Search,
  Filter,
  Settings,
  Plus,
  Minus,
  X,
  Check,
  ChevronDown,
  ChevronUp,
  ChevronLeft,
  ChevronRight,
  MoreHorizontal,
  MoreVertical,
  Star,
  Bookmark,
  Tag,
  Layers,
  Grid,
  List,
  BarChart3,
  PieChart,
  TrendingUp,
  TrendingDown,
  Clock,
  Timer,
  Calendar as CalendarIcon,
  Bell,
  Mail,
  Phone,
  MessageSquare,
  Video,
  Camera,
  Mic,
  Headphones,
  Volume2,
  VolumeX,
  Play,
  Pause,
  Stop,
  SkipBack,
  SkipForward,
  Repeat,
  Shuffle,
  Download,
  Upload,
  Share,
  Copy,
  Edit,
  Trash2,
  Save,
  RefreshCw,
  RotateCcw,
  RotateCw,
  Move,
  Maximize,
  Minimize,
  ExternalLink,
  Link,
  Unlink,
  Image,
  File,
  Folder,
  FolderOpen,
  Archive,
  Package,
  Truck,
  Car,
  Plane,
  Train,
  Ship,
  Bike,
  Home,
  Building2,
  Factory,
  Store,
  School,
  Hospital,
  Church,
  Bank,
  Coffee,
  Utensils,
  ShoppingCart,
  CreditCard,
  DollarSign,
  Euro,
  Pound,
  Yen,
  Bitcoin,
  Award,
  Trophy,
  Medal,
  Gift,
  PartyPopper,
  Cake,
  Music,
  Gamepad2,
  Tv,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Desktop,
  Server,
  Router,
  Wifi,
  Bluetooth,
  Battery,
  BatteryCharging,
  Power,
  PowerOff,
  Sun,
  Moon,
  Cloud,
  CloudRain,
  CloudSnow,
  CloudLightning,
  Wind,
  Thermometer,
  Droplets,
  Flame,
  Snowflake,
  Umbrella,
  TreeDeciduous,
  Flower,
  Leaf,
  Bug,
  Fish,
  Bird,
  Cat,
  Dog,
  Rabbit,
  Mouse,
  Squirrel,
  Whale,
  Octopus,
  Butterfly,
  Bee,
  Spider,
  Ant,
  Ladybug,
  Snail,
  Turtle,
  Frog,
  Lizard,
  Snake,
  Crocodile,
  Elephant,
  Giraffe,
  Lion,
  Tiger,
  Bear,
  Wolf,
  Fox,
  Deer,
  Horse,
  Cow,
  Pig,
  Sheep,
  Goat,
  Chicken,
  Duck,
  Goose,
  Turkey,
  Penguin,
  Owl,
  Eagle,
  Hawk,
  Parrot,
  Peacock,
  Flamingo,
  Toucan,
  Hummingbird,
  Robin,
  Cardinal,
  BlueJay,
  Crow,
  Raven,
  Magpie,
  Woodpecker,
  Kingfisher,
  Heron,
  Stork,
  Crane,
  Pelican,
  Albatross,
  Seagull,
  Pigeon,
  Dove,
  Swan,
  Flag,
} from 'lucide-react';

// Type for icon components
export type ResourceTypeIcon = React.ComponentType<{ className?: string; size?: number }>;

// Comprehensive icon mapping for FHIR resource types
const resourceTypeIconMap: Record<string, ResourceTypeIcon> = {
  // Core clinical resources
  Patient: Users,
  Observation: Activity,
  Encounter: Calendar,
  Condition: Heart,
  Practitioner: UserCog,
  PractitionerRole: UserCog,
  Organization: Building,
  Location: MapPin,
  
  // Medication resources
  Medication: Pill,
  MedicationRequest: FileCheck,
  MedicationAdministration: Syringe,
  MedicationDispense: Package,
  MedicationStatement: FileArchive,
  MedicationKnowledge: Bookmark,
  
  // Procedure and diagnostic resources
  Procedure: Scissors,
  DiagnosticReport: FileText,
  ImagingStudy: Scan,
  Specimen: TestTube,
  SpecimenDefinition: TestTube,
  
  // Allergy and immunization
  AllergyIntolerance: AlertTriangle,
  Immunization: Syringe,
  ImmunizationEvaluation: Check,
  ImmunizationRecommendation: Target,
  
  // Care planning
  CarePlan: ClipboardList,
  Goal: Target,
  ServiceRequest: FileCheck,
  Task: Check,
  
  // Document and communication
  DocumentReference: FileArchive,
  DocumentManifest: FileArchive,
  Composition: FileText,
  Communication: MessageSquare,
  CommunicationRequest: MessageSquare,
  
  // Appointment and scheduling
  Appointment: CalendarCheck,
  AppointmentResponse: CalendarCheck,
  Schedule: Clock,
  Slot: Timer,
  
  // Device and equipment
  Device: Cpu,
  DeviceDefinition: Settings,
  DeviceMetric: BarChart3,
  DeviceRequest: FileCheck,
  DeviceUseStatement: FileArchive,
  
  // Financial and billing
  Account: DollarSign,
  ChargeItem: CreditCard,
  ChargeItemDefinition: Settings,
  Claim: FileArchive,
  ClaimResponse: Check,
  Coverage: Shield,
  CoverageEligibilityRequest: FileCheck,
  CoverageEligibilityResponse: Check,
  EnrollmentRequest: FileArchive,
  EnrollmentResponse: Check,
  Invoice: FileArchive,
  PaymentNotice: Bell,
  PaymentReconciliation: BarChart3,
  
  // Research and studies
  ResearchStudy: BarChart3,
  ResearchSubject: UserCog,
  ResearchDefinition: Bookmark,
  ResearchElementDefinition: Settings,
  
  // Terminology and codes
  CodeSystem: Database,
  ValueSet: List,
  ConceptMap: Link,
  NamingSystem: Settings,
  TerminologyCapabilities: FileCheck,
  
  // Conformance and capability
  CapabilityStatement: Settings,
  StructureDefinition: FileText,
  StructureMap: Link,
  ImplementationGuide: Bookmark,
  OperationDefinition: Cpu,
  SearchParameter: Search,
  CompartmentDefinition: Folder,
  
  // Audit and security
  AuditEvent: Eye,
  Consent: Shield,
  Provenance: Link,
  
  // Other common resources
  List: List,
  Bundle: Package,
  Parameters: Settings,
  Binary: File,
  Basic: Database,
  Flag: Flag,
  Library: Bookmark,
  Measure: BarChart3,
  MeasureReport: PieChart,
  PlanDefinition: ClipboardList,
  Questionnaire: FileArchive,
  QuestionnaireResponse: Check,
  RequestGroup: ClipboardList,
  RiskAssessment: AlertTriangle,
  SupplyRequest: Package,
  SupplyDelivery: Truck,
  VisionPrescription: Eye,
  NutritionOrder: Utensils,
  BodyStructure: Heart,
  MolecularSequence: Database,
  Substance: TestTube,
  SubstanceNucleicAcid: TestTube,
  SubstancePolymer: Layers,
  SubstanceProtein: Zap,
  SubstanceReferenceInformation: Bookmark,
  SubstanceSourceMaterial: Leaf,
  SubstanceSpecification: FileCheck,
  BiologicallyDerivedProduct: TestTube,
  MedicinalProduct: Pill,
  MedicinalProductAuthorization: Shield,
  MedicinalProductContraindication: AlertTriangle,
  MedicinalProductIndication: Check,
  MedicinalProductIngredient: TestTube,
  MedicinalProductInteraction: AlertTriangle,
  MedicinalProductManufactured: Factory,
  MedicinalProductPackaged: Package,
  MedicinalProductPharmaceutical: Syringe,
  MedicinalProductUndesirableEffect: AlertTriangle,
  EventDefinition: Calendar,
  Evidence: FileArchive,
  EvidenceVariable: BarChart3,
  EffectEvidenceSynthesis: FileArchive,
  RiskEvidenceSynthesis: AlertTriangle,
  ExampleScenario: FileArchive,
  GraphDefinition: Globe,
  Linkage: Link,
  MessageDefinition: MessageSquare,
  MessageHeader: MessageSquare,
  OperationOutcome: AlertTriangle,
  Subscription: Bell,
  TestReport: FileCheck,
  TestScript: FileArchive,
  VerificationResult: Check,
  CatalogEntry: Database,
  Contract: FileArchive,
  EpisodeOfCare: Calendar,
  FamilyMemberHistory: Users,
  HealthcareService: Building,
  Media: Camera,
  RelatedPerson: UserCog,
  Group: Users,
  Endpoint: Globe,
  InsurancePlan: Shield,
  Person: UserCog,
  ActivityDefinition: Activity,
  AdverseEvent: AlertTriangle,
  ClinicalImpression: FileArchive,
  DetectedIssue: AlertTriangle,
  GuidanceResponse: FileArchive,
  Media: Camera,
  NutritionOrder: Utensils,
  RequestGroup: ClipboardList,
  RiskAssessment: AlertTriangle,
  SupplyRequest: Package,
  SupplyDelivery: Package,
  VisionPrescription: Eye,
};

/**
 * Get the appropriate icon component for a FHIR resource type
 * @param resourceType - The FHIR resource type name
 * @returns The icon component to use, defaults to Database icon
 */
export function getResourceTypeIcon(resourceType: string): ResourceTypeIcon {
  return resourceTypeIconMap[resourceType] || Database;
}

/**
 * Get all available resource type icons
 * @returns Object mapping resource types to their icon components
 */
export function getAllResourceTypeIcons(): Record<string, ResourceTypeIcon> {
  return { ...resourceTypeIconMap };
}

/**
 * Check if a resource type has a custom icon
 * @param resourceType - The FHIR resource type name
 * @returns True if the resource type has a custom icon, false if it uses the default
 */
export function hasCustomIcon(resourceType: string): boolean {
  return resourceType in resourceTypeIconMap;
}

// Export the icon map for direct access if needed
export { resourceTypeIconMap };
